{"version":3,"sources":["utils/index.js","Dashboard/index.js","Comparison/index.js","data.js","AIAgentApp/transformData.js","AIAgentApp/index.js","index.js"],"names":["capitalize","word","replace","c","toUpperCase","categories","Loading","className","DashboardTable","agents","toggleCheck","selectedAgents","cellSpacing","cellPadding","colSpan","map","category","agent","includes","id","key","onClick","name","description","tasks","Dashboard","props","length","Instructions","ComparisonTable","highlightHighestScore","maxScore","reduce","highestScore","agentWithMaxScore","find","undefined","i","Comparison","currentId","nextId","asFallibleAsyncResponse","data","Promise","resolve","reject","min","max","setTimeout","percentageTrue","Math","random","Error","AGENTS","score","AgentsApi","nameSubstr","filter","averageScores","obj","tasksInCategory","task","averageScore","count","round","averageCategoryScore","AIAgentApp","useState","setAgents","setSelectedAgents","useEffect","agentsApi","listAgents","then","res","transformData","catch","alert","unselectAgent","selectAgent","exact","to","path","render","ReactDOM","basename","process","console","log","document","getElementById"],"mappings":"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","file":"static/js/main.f57ce21f.chunk.js","sourcesContent":["export const capitalize = (word) => word.replace(/^\\w/, c => c.toUpperCase());\n\nexport const categories = ['memory', 'logic', 'planning'];","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { categories, capitalize } from '../utils';\nimport './Dashboard.css';\n\nconst Loading = () => (\n    <div className=\"loader\">\n        <div></div>\n        <div></div>\n        <div></div>\n    </div>\n);\n\nconst DashboardTable = ({ agents, toggleCheck, selectedAgents }) => (\n    <table className=\"dashboard-table\" cellSpacing=\"0\" cellPadding=\"0\">\n        <tbody>\n            <tr>\n                <th></th>\n                <th></th>\n                <th colSpan=\"3\">Average Task Score</th>\n            </tr>\n            <tr>\n                <th>Agent</th>\n                <th>Description</th>\n                {categories.map(category => (\n                    <th>{capitalize(category)}</th>\n                ))}\n            </tr>\n            {agents.map(agent => (\n                <tr\n                    className={`data-row ${selectedAgents.includes(agent.id) && 'selected'}`}\n                    key={agent.id}\n                    onClick={() => toggleCheck(agent.id)}\n                >\n                    <td>{agent.name}</td>\n                    <td>{agent.description}</td>\n                    {categories.map(category => (\n                        <td>{agent.tasks[category]}</td>\n                    ))}\n                </tr>\n            ))}\n        </tbody>\n    </table>\n);\n\nconst Dashboard = (props) => !props.agents.length\n    ? <Loading />\n    : <DashboardTable  {...props} />;\n\nDashboard.propTypes = {\n    agents: PropTypes.arrayOf(PropTypes.exact({\n        id: PropTypes.number,\n        name: PropTypes.string,\n        description: PropTypes.string,\n        tasks: PropTypes.objectOf(PropTypes.number)\n      })).isRequired,\n    toggleCheck: PropTypes.func.isRequired,\n    selectedAgents: PropTypes.arrayOf(PropTypes.number)\n};\n\nexport default Dashboard;\n  ","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { categories, capitalize } from '../utils';\nimport './Comparison.css';\n\nconst Instructions = () => (\n    <p className=\"instructions\">\n        Go to the dashboard and select <b>2 agents</b> to compare by clicking on them.\n    </p>\n);\n\nconst ComparisonTable = ({ agents }) => {\n\n    const agentWithMaxScore = (category) => {\n        const maxScore = agents.reduce((highestScore, agent) => \n            (agent.tasks[category] > highestScore ? agent.tasks[category] : highestScore), 0);\n        const agentWithMaxScore = agents.find(agent => maxScore === agent.tasks[category]).id;\n        return agentWithMaxScore;\n    };\n\n    const highlightHighestScore = (agent, category) => \n        ((agent.id === agentWithMaxScore(category)) ? 'higher-score' : undefined);\n\n    return (\n        <table className=\"comparison-table\" cellSpacing=\"0\" cellPadding=\"0\">\n            <tbody>\n                <tr>\n                    <th></th>\n                    {agents.map(agent => <th key={agent.id}>{agent.name}</th>)}\n                </tr>\n                <tr>\n                    <td></td>\n                    {agents.map(agent => <td key={agent.id}>{agent.description}</td>)}\n                </tr>\n                {categories.map((category, i) => (\n                    <tr key={i}>\n                        <td>{capitalize(category)}</td>\n                        {agents.map(agent => (\n                            <td key={agent.id} className={highlightHighestScore(agent, category)}>\n                                {agent.tasks[category]}\n                            </td>\n                        ))}\n                    </tr>\n                ))}\n            </tbody>\n        </table>\n    )\n};\n\nconst Comparison = (props) => props.agents.length !== 2\n    ? <Instructions />\n    : <ComparisonTable  {...props} />;\n\nComparison.propTypes = {\n    agents: PropTypes.arrayOf(PropTypes.exact({\n        id: PropTypes.number,\n        name: PropTypes.string,\n        description: PropTypes.string,\n        tasks: PropTypes.objectOf(PropTypes.number)\n      }))\n};\n\nexport default Comparison;","// == Helper utilities ==\nlet currentId = 1;\n\n/** Returns a new unique ID at every invocation. */\nfunction nextId() {\n    return currentId++;\n}\n/** Returns a random number between min and max. */\nfunction randomBetween(min, max) {\n    const rand = Math.random();\n    const span = max - min;\n    return rand * span + min;\n}\n/** Returns true a random percentage of invocations. */\nfunction randomCondition(percentageTrue) {\n    const rand = Math.random();\n    return rand < percentageTrue;\n}\nconst MIN_LATENCY_MS = 100;\nconst MAX_LATENCY_MS = 3000;\nconst FAILURE_RATE = 0.05; /* 5% API calls fail */\n/**\n * Returns the data as a Promise, delayed by a random latency and\n * occasionally failing with an error.\n * */\nfunction asFallibleAsyncResponse(data) {\n    return new Promise((resolve, reject) => {\n        setTimeout(() => {\n            if (randomCondition(FAILURE_RATE)) {\n                reject(new Error('API Error - database unavailable.'));\n            }\n            else {\n                resolve(data);\n            }\n        }, randomBetween(MIN_LATENCY_MS, MAX_LATENCY_MS)); \n    });\n    // return Promise.resolve(data);\n}\n\n/** Fake list of agents. */\nconst AGENTS = [\n    {\n        id: nextId(),\n        name: 'IMPALA',\n        description: 'Scalable Distributed Deep-RL with Importance Weighted Actor-Learner Architectures',\n        tasks: [\n            {\n                id: 'mem_1',\n                name: 'Blackjack',\n                category: 'memory',\n                score: 56\n            },\n            {\n                id: 'mem_2',\n                name: 'Q-bert',\n                category: 'memory',\n                score: 61\n            },\n            {\n                id: 'logic_1',\n                name: 'Breakout',\n                category: 'logic',\n                score: 79\n            },\n            {\n                id: 'logic_2',\n                name: 'Tetris',\n                category: 'logic',\n                score: 21\n            },\n            {\n                id: 'logic_3',\n                name: 'Basic Math',\n                category: 'logic',\n                score: 54\n            },\n            {\n                id: 'planning_1',\n                name: 'Pacman',\n                category: 'planning',\n                score: 58\n            }\n        ]\n    },\n    {\n        id: nextId(),\n        name: 'AlphaZero',\n        description: 'Generalisation of AlphaGo Zero that can achieve, tabula rasa, superhuman performance in many challenging domains such as Chess, Shogi and Go.',\n        tasks: [\n            {\n                id: 'mem_1',\n                name: 'Blackjack',\n                category: 'memory',\n                score: 37\n            },\n            {\n                id: 'mem_2',\n                name: 'Q-bert',\n                category: 'memory',\n                score: 29\n            },\n            {\n                id: 'logic_1',\n                name: 'Breakout',\n                category: 'logic',\n                score: 78\n            },\n            {\n                id: 'logic_2',\n                name: 'Tetris',\n                category: 'logic',\n                score: 92\n            },\n            {\n                id: 'logic_3',\n                name: 'Basic Math',\n                category: 'logic',\n                score: 88\n            },\n            {\n                id: 'planning_1',\n                name: 'Pacman',\n                category: 'planning',\n                score: 100\n            }\n        ]\n    },\n    {\n        id: nextId(),\n        name: 'R2D3',\n        description: 'Making Efficient Use of Demonstrations to Solve Hard Exploration Problems.',\n        tasks: [\n            {\n                id: 'mem_1',\n                name: 'Blackjack',\n                category: 'memory',\n                score: 85\n            },\n            {\n                id: 'mem_2',\n                name: 'Q-bert',\n                category: 'memory',\n                score: 73\n            },\n            {\n                id: 'logic_1',\n                name: 'Breakout',\n                category: 'logic',\n                score: 28\n            },\n            {\n                id: 'logic_2',\n                name: 'Tetris',\n                category: 'logic',\n                score: 26\n            },\n            {\n                id: 'logic_3',\n                name: 'Basic Math',\n                category: 'logic',\n                score: 44\n            },\n            {\n                id: 'planning_1',\n                name: 'Pacman',\n                category: 'planning',\n                score: 72\n            }\n        ]\n    }\n];\n\n// == Fake API Service ==\n/** API service to use to complete the project.*/\nexport class AgentsApi {\n    listAgents() {\n        return asFallibleAsyncResponse(AGENTS);\n    }\n    searchAgents(nameSubstr) {\n        return asFallibleAsyncResponse(AGENTS.filter(agent => agent.name.includes(nameSubstr)));\n    }\n    getAgent(id) {\n        return asFallibleAsyncResponse(AGENTS.find(agent => agent.id === id));\n    }\n}","import { categories } from '../utils';\n\nconst averageCategoryScore = (tasks, category) => {\n  const tasksInCategory = tasks.filter(task => task.category === category)\n  const averageScore = tasksInCategory\n    .reduce((count, task) => (count + task.score), 0)/tasksInCategory.length;\n  // 2 decimal places\n  return Math.round(averageScore * 100)/100;\n};\n\nconst averageScores = (tasks) => categories.reduce((obj, category) => ({\n      ...obj,\n      [category]: averageCategoryScore(tasks, category),\n    }), {});\n\n// Data transformed into data we need to save memory in the App\nexport const transformData = (res) => res.map(agent => ({\n    id: agent.id,\n    name: agent.name,\n    description: agent.description,\n    tasks: averageScores(agent.tasks)\n  }));","import React, { useEffect, useState } from 'react';\nimport { Route, NavLink } from 'react-router-dom';\nimport Dashboard from '../Dashboard';\nimport Comparison from '../Comparison';\nimport { AgentsApi } from '../data';\nimport { transformData } from './transformData';\nimport './AIAgentApp.css';\n\nconst AIAgentApp = () => {\n  const [agents, setAgents] = useState([]);\n  const [selectedAgents, setSelectedAgents] = useState([]);\n\n  // Run on first render of component\n  useEffect(() => {\n    const agentsApi = new AgentsApi();\n    Promise.resolve(agentsApi.listAgents())\n        .then(res => setAgents(transformData(res)))\n        .catch(() => alert('There was an error fetching the data. Please refresh the page.'));\n  }, []);\n\n  const toggleCheck = (id) => {\n    if (selectedAgents.includes(id)) {\n      const unselectAgent = selectedAgents.filter(agent => agent !== id );\n      setSelectedAgents(unselectAgent)\n    } else if (selectedAgents.length === 2) {\n      alert('Can\\'t compare more than 2 agents. To select other agents, unselect the current ones.')\n    } else {\n      const selectAgent = [ ...selectedAgents, id ];\n      setSelectedAgents(selectAgent)\n    }\n  };\n\n  return (\n    <div>\n      <h1 className=\"title\"><b>DeepMind</b> AI Agent Comparison</h1>\n      <ul className=\"navigation\">\n        <li><NavLink exact to=\"/\">Dashboard</NavLink></li>\n        <li><NavLink to=\"/compare\">Compare</NavLink></li>\n      </ul>\n      <div className=\"content\">\n        <Route exact path=\"/\" render={() => \n          <Dashboard\n            agents={agents}\n            toggleCheck={toggleCheck}\n            selectedAgents={selectedAgents}\n          />}/>\n        <Route path=\"/compare\" render={() =>\n          <Comparison\n            agents={agents.filter(agent => selectedAgents.includes(agent.id))}\n          />}/>\n      </div>\n    </div>\n  );\n}\n\nexport default AIAgentApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport AIAgentApp from './AIAgentApp';\nimport './index.css';\n\nReactDOM.render(\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n        {console.log(process.env.PUBLIC_URL)}\n        <AIAgentApp />\n    </BrowserRouter>, document.getElementById('root'));\n"],"sourceRoot":""}